package cz.cvut.fit.geotrip.presentation.view;

import cz.cvut.fit.geotrip.presentation.controller.MapImportController;
import cz.cvut.fit.geotrip.business.MainModel;
import java.awt.Frame;
import java.io.File;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

public final class MapImportDialog extends javax.swing.JDialog {

    MainModel model;
    MapImportController controller;

    /**
     * Creates new form MapImportDialog
     *
     * @param parent
     * @param modal
     * @param model
     */
    public MapImportDialog(Frame parent, boolean modal, MainModel model) {
        super(parent, modal);

        this.model = model;
        model.registerMapImportDialogObserver(new MapImportDialogObserver(this));

        initComponents();

        this.setLocation(parent.getLocation().x + parent.getSize().width / 2 - this.getSize().width / 2,
                parent.getLocation().y + parent.getSize().height / 2 - this.getSize().height / 2);

        hideProgressBar();

        fileChooserMap.addChoosableFileFilter(new FileNameExtensionFilter("Mapsforge map (*.map)", "map"));
        fileChooserOsm.addChoosableFileFilter(new FileNameExtensionFilter("OpenStreetMap (*.osm.pbf)", "pbf"));
    }

    public void registerController(MapImportController controller) {
        this.controller = controller;
    }

    public void showProgressBar() {
        progressBar.setVisible(true);
    }

    public void hideProgressBar() {
        progressBar.setVisible(false);
    }

    public void showMapFileChooser() {
        fileChooserMap.showDialog(this, null);
    }

    public void showOsmFileChooser() {
        fileChooserOsm.showDialog(this, null);
    }

    public void setCurrentDirectory(File dir) {
        fileChooserMap.setCurrentDirectory(dir);
        fileChooserOsm.setCurrentDirectory(dir);
    }

    public void enableButtons() {
        buttonCancel.setEnabled(true);
        buttonImport.setEnabled(true);
        buttonSelectMap.setEnabled(true);
        buttonSelectOsm.setEnabled(true);
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    }

    public void disableButtons() {
        buttonCancel.setEnabled(false);
        buttonImport.setEnabled(false);
        buttonSelectMap.setEnabled(false);
        buttonSelectOsm.setEnabled(false);
        this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
    }

    public void setChosenMapName(String name) {
        textMapFile.setText(name);
    }

    public void setChosenOsmName(String name) {
        textOsmFile.setText(name);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooserOsm = new javax.swing.JFileChooser();
        fileChooserMap = new javax.swing.JFileChooser();
        labelMapFile = new javax.swing.JLabel();
        labelOsmFile = new javax.swing.JLabel();
        textMapFile = new javax.swing.JTextField();
        textOsmFile = new javax.swing.JTextField();
        buttonSelectMap = new javax.swing.JButton();
        buttonSelectOsm = new javax.swing.JButton();
        buttonImport = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();

        fileChooserOsm.setAcceptAllFileFilterUsed(false);
        fileChooserOsm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserOsmActionPerformed(evt);
            }
        });

        fileChooserMap.setAcceptAllFileFilterUsed(false);
        fileChooserMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserMapActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("texts"); // NOI18N
        setTitle(bundle.getString("menuMapImport")); // NOI18N
        setResizable(false);

        labelMapFile.setText(bundle.getString("importMapFile")); // NOI18N

        labelOsmFile.setText(bundle.getString("importOsmFile")); // NOI18N

        textMapFile.setEnabled(false);

        textOsmFile.setEnabled(false);

        buttonSelectMap.setText(bundle.getString("importSelect")); // NOI18N
        buttonSelectMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelectMapActionPerformed(evt);
            }
        });

        buttonSelectOsm.setText(bundle.getString("importSelect")); // NOI18N
        buttonSelectOsm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelectOsmActionPerformed(evt);
            }
        });

        buttonImport.setText(bundle.getString("importImport")); // NOI18N
        buttonImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImportActionPerformed(evt);
            }
        });

        buttonCancel.setText(bundle.getString("importClose")); // NOI18N
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        progressBar.setIndeterminate(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonImport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelMapFile)
                            .addComponent(labelOsmFile))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textOsmFile, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textMapFile, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonSelectOsm)
                            .addComponent(buttonSelectMap))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textMapFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMapFile)
                    .addComponent(buttonSelectMap))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOsmFile)
                    .addComponent(textOsmFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSelectOsm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonImport)
                        .addComponent(buttonCancel))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImportActionPerformed
        controller.importMap(fileChooserMap.getSelectedFile(), fileChooserOsm.getSelectedFile());
    }//GEN-LAST:event_buttonImportActionPerformed

    private void buttonSelectMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectMapActionPerformed
        controller.selectMap();
    }//GEN-LAST:event_buttonSelectMapActionPerformed

    private void buttonSelectOsmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectOsmActionPerformed
        controller.selectOsm();
    }//GEN-LAST:event_buttonSelectOsmActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        controller.closeDialog();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void fileChooserOsmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserOsmActionPerformed
        controller.setChosenOsm(fileChooserOsm.getSelectedFile());
    }//GEN-LAST:event_fileChooserOsmActionPerformed

    private void fileChooserMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserMapActionPerformed
        controller.setChosenMap(fileChooserMap.getSelectedFile());
    }//GEN-LAST:event_fileChooserMapActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonImport;
    private javax.swing.JButton buttonSelectMap;
    private javax.swing.JButton buttonSelectOsm;
    private javax.swing.JFileChooser fileChooserMap;
    private javax.swing.JFileChooser fileChooserOsm;
    private javax.swing.JLabel labelMapFile;
    private javax.swing.JLabel labelOsmFile;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField textMapFile;
    private javax.swing.JTextField textOsmFile;
    // End of variables declaration//GEN-END:variables
}
